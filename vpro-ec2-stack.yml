---
- name: setup vprofile stack
  hosts: localhost
  connection: local
  gather_facts: no

  tasks:
    - name: Import vpc setup variables
      include_vars: vars/output_vars

    - name: Import vprofile setup variables
      include_vars: vars/vprostacksetup

    - name: Create vprofile EC2 key
      ec2_key:
        name: vprokey
        region: "{{ region }}"
      register: vprokey_out

    - name: Save private key into file loginkey_vpro.pem
      copy:
        content: "{{ vprokey_out.key.private_key }}"
        dest: "./loginkey_vpro.pem"
        mode: '0600'
      when: vprokey_out.changed

    - name: create security group for load balancer
      ec2_group:
        name: vproELB-sg
        description: allow port 80 from everywhere and all port within sg
        region: "{{region}}"
        vpc_id: "{{vpcid}}"
        rules:
          - proto:  tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
      register: vproELBSG_out


    - name: create security group for vprofile stack
      ec2_group: 
        name: vproStack-sg
        description: allow port 22 from everywhee and all port within sg
        region: "{{region}}"
        vpc_id: "{{vpcid}}"
        purge_rules:  no
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            group_id: "{{ vproELBSG_out.group_id }}"



          - proto: tcp
            from_port: 22
            to_port: 22
            group_id: "{{ BastionSGid }}"

      register: vproStackSG_out 

    - name: Update security group with itsown sg id 
      ec2_group: 
        name: vproStack-sg
        description: allowport 22from everywhere and all  port within sg 
        region: "{{region}}"
        vpc_id: "{{vpcid}}"
        purge_rules: no
        rules: 
          - proto: all
            group_id: "{{ vproStackSG_out.group_id }}"

    - name: creating nginx web01
      amazon.aws.ec2_instance:
        key_name: vprokey
        region: "{{region}}"
        instance_type: t2.micro
        image_id: "{{nginx_ami}}"
        wait: yes
        wait_timeout: 300
        tags:
          Name: "web01"
          Project: Vprofile
          Owner: DevOps Team
        security_group: "{{ vproStackSG_out.group_id }}"
        vpc_subnet_id: "{{ privsub1id }}"
      register: web01_out
      
          
    - name: creating tomcat app01
      amazon.aws.ec2_instance:
        key_name: vprokey
        region: "{{region}}"
        instance_type: t2.micro
        image_id: "{{tomcat_ami}}"
        wait: yes
        wait_timeout: 300
        tags:
          Name: "app01"
          Project: Vprofile
          Owner: DevOps Team
        security_group: "{{ vproStackSG_out.group_id }}"
        vpc_subnet_id: "{{ privsub1id }}"
      register: app01_out

    - name: creating memcache mc01
      amazon.aws.ec2_instance:
        key_name: vprokey
        region: "{{region}}"
        instance_type: t2.micro
        image_id: "{{memcache_ami}}"
        wait: yes
        wait_timeout: 300
        tags:
          Name: "mc01"
          Project: Vprofile
          Owner: DevOps Team
        security_group: "{{ vproStackSG_out.group_id }}"
        vpc_subnet_id: "{{ privsub1id }}"
      register: mc01_out


    - name: creating RabbitMq rmq01
      amazon.aws.ec2_instance:
        key_name: vprokey
        region: "{{region}}"
        instance_type: t2.micro
        image_id: "{{rmq_ami}}"
        wait: yes
        wait_timeout: 300
        tags:
          Name: "rmq01"
          Project: Vprofile
          Owner: DevOps Team
        security_group: "{{ vproStackSG_out.group_id }}"
        vpc_subnet_id: "{{ privsub1id }}"
      register: rmq01_out


    - name: creating Mysql db01
      amazon.aws.ec2_instance:
        key_name: vprokey
        region: "{{region}}"
        instance_type: t2.micro
        image_id: "{{mysql_ami}}"
        wait: yes
        wait_timeout: 300
        tags:
          Name: "db01"
          Project: Vprofile
          Owner: DevOps Team
        security_group: "{{ vproStackSG_out.group_id }}"
        vpc_subnet_id: "{{ privsub1id }}"
      register: db01_out
    - debug:
        var: db01_out
